#include <iostream>

#include <vector>
#include <stack>
#include <numeric>
#include <ctime>

#include "MyGraph.h"

using namespace std;

	void MyGraph::rndfill(){
		srand(time(0));
		for(int i=0; i<size; i++){
			for(int j=i; j<size; j++){
				A[i][j]=rand()%2;
				A[j][i]=A[i][j];
			}
				
			A[i][i]=0;
		}
						
	}
	
	void MyGraph::findpath(){
    vector<int> numofadj;
    
    vector<vector<int>>B(size, vector<int>(size,0));
    for(int i=0; i<size; i++)
    	for(int j=0; j<size; j++)
    		B[i][j]=A[i][j];
 
    for (int i = 0; i < size; i++)
        numofadj.push_back(accumulate(B[i].begin(), B[i].end(), 0));
 
    int startpoint = 0, numofodd = 0;
    
	for (int i = size - 1; i >= 0; i--)
    {
        if (numofadj[i] % 2 == 1)
        {
            numofodd++;
            startpoint = i;
        }
    }
    
    if (numofodd > 2) 
    {
        cout << "The graph has no Euler's path." << endl;
        return;
    }

    stack<int> stack;
    vector<int> path;
    int cur = startpoint;
    
	while (!stack.empty() or accumulate(B[cur].begin(),B[cur].end(), 0) != 0)
    {
        if (accumulate(B[cur].begin(), B[cur].end(), 0) == 0)
        {
            path.push_back(cur);
            cur = stack.top();
            stack.pop();
        }

        else
        {
            for (int i = 0; i < size; i++)
            {
                if (B[cur][i] == 1) 
                {
                    stack.push(cur);
                    B[cur][i] = 0;
                    B[i][cur] = 0;
                    cur = i;
                    break;
                }
            }
        }
    }
    
    for (auto elem : path) 
		cout << elem << " -> ";
    cout << cur << endl;
	}
	
	void MyGraph::print(){
		if(!A.empty())
		for(int i=0; i<size; i++){
			for(int j=0; j<size; j++)
				cout<<A[i][j]<<"\t";
			cout<<endl;
		}
	}
	
	void MyGraph::manfill(){
		cout<<"As you finish, the graph will be automatically converted to an undirected graph."<<endl;
		cout<<"Fill the table "<<size<<"x"<<size<<":"<<endl;
		
		for (int i=0; i<size; i++)
			for (int j=0; j<size; j++)
				cin>>A[i][j];
				
		for (int i=0; i<size; i++){
			for(int j=i; j<size; j++)
				A[j][i]=A[i][j];
			A[i][i]=0;
		}
			
	}
	
	int MyGraph::getsize(){
		return size;
	}
	
	void MyGraph::setsize(int size){
		this->size=size;
		A.resize(size, vector<int>(size));
		A.shrink_to_fit();
	}

	MyGraph::MyGraph(int size):size(size){
		A.resize(size, vector<int>(size,0));
	}
	
	MyGraph::~MyGraph(){
		for(int i=0; i<size; i++){
			A[i].clear();
			A[i].shrink_to_fit();
		}
			
		A.clear();
		A.shrink_to_fit();
	}
